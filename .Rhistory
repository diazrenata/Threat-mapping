imaginaryValues <- seq(-2,2,length.out=10)
points <- generateComplexPoints(realRange=realValues,imaginaryRange=imaginaryValues)
points <- c(1)
for (i in 1:9) {
t1result = transform1(points)
t2result = transform2(points)
t1invresult = transform1inv(points)
t2invresult = transform2inv(points)
points = c(t1result,t2result,t1invresult,t2invresult)
}
plot(Re(points), Im(points), main="Mobius Chaos4", xlab = "", ylab = "",
pch=".", col="green", bg = "blue")
# shows how the points jump around
#lines(HenonX[90:110], HenonY[90:110])
}
generateMobiusNoChaos()
generateMobiusNoChaos <- function()
{
ta = complex(real=2) #complex(real = 1.87, imaginary=.1)
tb = complex(real=2) # complex(real = 1.87, imaginary=-.1)
#  ta = complex(real = 1.87, imaginary=.1)
#  tb = complex(real = 1.87, imaginary=-.1)
i = complex(imaginary=1)
tab = (ta*tb - sqrt((-1*ta*tb)^2 - 4*(ta^2 + tb^2)))/2
z0 = ((tab - 2)*tb)/(tb*tab - 2*ta + 2*i*tab)
a1 = ta/2
b1 = (ta*tab - 2*tb + 4*i)/((2*tab + 4)*z0)
c1 = (ta*tab - 2*tb - 4*i)*z0/(2*tab - 4)
d1 = ta/2
a2 = (tb - 2*i)/2
b2 = tb/2
c2 = tb/2
d2 = (tb + 2*i)/2
# makes the a-gasket
#  a1 = 1
#  b1 = 0
#  c1 = -2*i
#  d1 = 1
#  a2 = 1 - i
#  b2 = 1
#  c2 = 1
#  d2 =  1+i
transform1 <- function(z) {
(a1*z + b1)/(c1*z + d1)
}
transform1inv <- function(z) {
(d1*z - b1)/(-c1*z + a1)
}
transform2 <- function(z) {
(a2*z + b2)/(c2*z + d2)
}
transform2inv <- function(z) {
(d2*z - b2)/(-c2*z + a2)
}
allTransforms <- c(transform1,transform2, transform1inv, transform2inv)
realValues <- seq(-2,2,length.out=10)
imaginaryValues <- seq(-2,2,length.out=10)
points <- generateComplexPoints(realRange=realValues,imaginaryRange=imaginaryValues)
points <- c(1)
for (i in 1:9) {
t1result = transform1(points)
t2result = transform2(points)
t1invresult = transform1inv(points)
t2invresult = transform2inv(points)
points = c(t1result,t2result,t1invresult,t2invresult)
}
plot(Re(points), Im(points), main="Mobius Chaos4", xlab = "", ylab = "",
pch=".", col="seagreen4", axes = FALSE)
# shows how the points jump around
#lines(HenonX[90:110], HenonY[90:110])
}
generateMobiusNoChaos()
generateMobiusNoChaos <- function()
{
ta = complex(real=2) #complex(real = 1.87, imaginary=.1)
tb = complex(real=2) # complex(real = 1.87, imaginary=-.1)
#  ta = complex(real = 1.87, imaginary=.1)
#  tb = complex(real = 1.87, imaginary=-.1)
i = complex(imaginary=1)
tab = (ta*tb - sqrt((-1*ta*tb)^2 - 4*(ta^2 + tb^2)))/2
z0 = ((tab - 2)*tb)/(tb*tab - 2*ta + 2*i*tab)
a1 = ta/2
b1 = (ta*tab - 2*tb + 4*i)/((2*tab + 4)*z0)
c1 = (ta*tab - 2*tb - 4*i)*z0/(2*tab - 4)
d1 = ta/2
a2 = (tb - 2*i)/2
b2 = tb/2
c2 = tb/2
d2 = (tb + 2*i)/2
# makes the a-gasket
#  a1 = 1
#  b1 = 0
#  c1 = -2*i
#  d1 = 1
#  a2 = 1 - i
#  b2 = 1
#  c2 = 1
#  d2 =  1+i
transform1 <- function(z) {
(a1*z + b1)/(c1*z + d1)
}
transform1inv <- function(z) {
(d1*z - b1)/(-c1*z + a1)
}
transform2 <- function(z) {
(a2*z + b2)/(c2*z + d2)
}
transform2inv <- function(z) {
(d2*z - b2)/(-c2*z + a2)
}
allTransforms <- c(transform1,transform2, transform1inv, transform2inv)
realValues <- seq(-2,2,length.out=10)
imaginaryValues <- seq(-2,2,length.out=10)
points <- generateComplexPoints(realRange=realValues,imaginaryRange=imaginaryValues)
points <- c(1)
for (i in 1:9) {
t1result = transform1(points)
t2result = transform2(points)
t1invresult = transform1inv(points)
t2invresult = transform2inv(points)
points = c(t1result,t2result,t1invresult,t2invresult)
}
plot(Re(points), Im(points), main="", xlab = "", ylab = "",
pch=".", col="seagreen4", axes = FALSE)
# shows how the points jump around
#lines(HenonX[90:110], HenonY[90:110])
}
generateMobiusNoChaos()
generateMobiusChaosGame()
library(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(raster)
library(rgdal)
library(dismo)
# Convert bil to GTIFF - do this once
makeBilGTIFF <- function(bilFile) {
if(substr(bilFile, as.numeric(nchar(bilFile)) - 3, as.numeric(nchar(bilFile))) == '.xml') return ()
thisBil <- raster(paste0(workDir, '/', bilFile))
fileTitle <- substr(bilFile, 0, as.numeric(nchar(bilFile)) - 4)
writeRaster(thisBil, paste0(workDir, '/', fileTitle), format = 'GTiff', overwrite = TRUE, progress = 'text')
}
workDir <- '~/Desktop/GCP/Data/PRISM/tmin'
bils <- as.matrix(list.files(workDir, full.names = FALSE, pattern = 'bil.bil'))
apply(bils, 1, FUN = makeBilGTIFF)
calculateMonthMean <- function(month, climateVariable, yearsBack){
if(climateVariable == "ppt") workDir <- '~/Desktop/GCP/Data/PRISM/ppt'
if(climateVariable == "tmin") workDir <- '~/Desktop/GCP/Data/PRISM/tmin'
if(climateVariable == "tmax") workDir <- '~/Desktop/GCP/Data/PRISM/tmax'
filePattern <- paste(month, "_bil", sep="")
allYearsStack <- stack(list.files(workDir, full.names = TRUE, pattern = filePattern))
# trim to time period
yearsToUse <- c((nlayers(allYearsStack) - yearsBack + 1):nlayers(allYearsStack))
theseYearsStack <- allYearsStack[[yearsToUse]]
# calculate mean over time period
cumulativeMean <- mean(theseYearsStack)
# write this raster
fileName <- paste(climateVariable, month, yearsBack, sep = "_")
writeRaster(cumulativeMean, paste0(workDir, '/monthly_means/', fileName), format = 'GTiff', overwrite = TRUE, progress = 'text')
}
allMonths <- c('01', '02', '03', '04','05','06','07','08','09','10','11','12')
allMonths <- as.matrix(allMonths)
apply(allMonths, 1, calculateMonthMean, climateVariable = 'tmin', yearsBack = 30)
apply(allMonths, 1, calculateMonthMean, climateVariable = 'tmin', yearsBack = 30)
apply(allMonths, 1, calculateMonthMean, climateVariable = 'tmin', yearsBack = 121)
workDir <- '~/Desktop/GCP/Data/PRISM/ppt'
bils <- as.matrix(list.files(workDir, full.names = FALSE, pattern = 'bil.bil'))
apply(bils, 1, FUN = makeBilGTIFF)
?princomp
library(plyr_)
library(plyr)
?join
?log
install.packages('popbio')
?popbio
library(popbio)
?popbio
library(popbio)
A <- matrix(c(0,0,5.905, 0.368,0.639,0.025, 0.001, 0.152, 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages, + stages))
stages <- c(“seedling”, “vegetative”, “flowering”)
stages <- c('seedling', 'vegetative', 'flowering')
A <- matrix(c(0,0,5.905, 0.368,0.639,0.025, 0.001, 0.152, 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages, + stages))
A <- matrix(c(0,0,5.905, 0.368,0.639,0.025, 0.001, 0.152, 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages, stages))
n <- c(5,5,5)
p <- pop.projection(A, n, 15)
p
View(A)
d.stages <- c('seed', 'seedling', 'small_adult', 'large_adult')
d.A <- matrix(nrow = 4, ncol = 4, dimnames = list(d.stages, d.stages))
View(d.A)
d.A <- matrix(c(0,seed.seedling, 0, 0, 0, seedling.survival, seedling.grow, 0, 0, 0, younga.suvival, younga.grow, 0, 0, 0, largea.survival)), byrow = TRUE, nrow = 4, ncol = 4, dimnames = list(d.stages, d.stages))
d.A <- matrix(c(0,seed.seedling, 0, 0, 0, seedling.survival, seedling.grow, 0, 0, 0, younga.suvival, younga.grow, 0, 0, 0, largea.survival), byrow = TRUE, nrow = 4, ncol = 4, dimnames = list(d.stages, d.stages))
d.A <- matrix(c(0,seed.seedling, 0, 0, 0, seedling.survival, seedling.grow, 0, 0, 0, younga.suvival, younga.grow, 0, 0, 0, largea.survival))
demo('fillmore')
help(pop.projection)
recordID <- c(1:50)
preTreatment <- c(100:150)
preTreatment <- c(101:150)
postTreatment <- c(151:200)
otherInfo1 <- vector(length = 50, data = c("a", "b", "c", "d", "e"))
otherInfo1 <- vector(c("a", "b", "c", "d", "e", length = 50))
otherInfo1 <- c(10:61)
otherInfo2 <- c(61:110)
startDF <- cbind(recordID, preTreatment, postTreatment, otherInfo1, otherInfo2)
View(startDF)
otherInfo1 <- c(11:60)
startDF <- cbind(recordID, preTreatment, postTreatment, otherInfo1, otherInfo2)
startDF <- as.data.frame(startDF)
View(startDF)
stacked <- stack(startDF, select=c(recordID, otherInfo1, otherInfo2))
View(stacked)
stackedValues <- stack(startDF, select=c(preTreatment, postTreatment))
View(stackedValues)
stackedValues <- stack(startDF, select=c(preTreatment, postTreatment, recordID))
View(stackedValues)
left <- startDF$recordID
left <- rbind(left, startDF$recordID)
left <- startDF$recordID
left <- cbind(left, startDF$recordID)
left <- vector(length = nrow(startDF) * 2, data = startDF$recordID)
left <- vector(length = nrow(startDF) * 2)
left <- vector(length = nrow(startDF) * 2, mode = "integer")
left <- c(startDF$recordID, startDF$recordID)
rm(left)
left <- c(startDF$recordID, startDF$recordID)
pre <- startDF[,c(recordID, preTreatment)]
pre <- startDF[,c('recordID', 'preTreatment')]
post <- startDF[,c('recordID', 'postTreatment')]
both <- c(pre, post)
both <- rbind(pre, post)
rm(both)
pre$pre.or.post <- 'pre'
post$pre.or.post <- 'post'
pre <- startDF[,c('recordID', 'preTreatment')]
post <- startDF[,c('recordID', 'postTreatment')]
colnames(pre) <- c('recordID', 'diameter')
colnames(post) <- c('recordID', 'diameter')
pre$pre.or.post <- 'pre'
post$pre.or.post <- 'post'
both <- rbind(pre, post)
View(both)
pre <- startDF[,c('recordID', 'preTreatment', 'otherInfo1', 'otherInfo2')]
post <- startDF[,c('recordID', 'postTreatment', 'otherInfo1', 'otherInfo2')]
colnames(pre$preTreatment) <- 'diameter'
colnames(pre) <- c('recordID', 'diameter', 'otherInfo1', 'otherInfo2')
colnames(post) <- c('recordID', 'diameter', 'otherInfo1', 'otherInfo2')
pre$pre.or.post <- 'pre'
post$pre.or.post <- 'post'
pre <- startDF[,c('recordID', 'preTreatment', 'otherInfo1', 'otherInfo2')]
post <- startDF[,c('recordID', 'postTreatment', 'otherInfo1', 'otherInfo2')]
colnames(pre) <- c('recordID', 'diameter', 'otherInfo1', 'otherInfo2')
colnames(post) <- c('recordID', 'diameter', 'otherInfo1', 'otherInfo2')
pre$pre.or.post <- 'pre'
post$pre.or.post <- 'post'
both <- rbind(pre, post)
View(both)
setwd("~/Desktop")
vote <- read.csv('vote.csv')
voteplot <- plot(vote)
voteplot <- barplot(vote)
voteplot <- ggplot(vote)
library(ggplot2)
testlist <- list(a, b, c)
testlist
testlist <- list(1, 2, 3)
testlist
testlist <- list(1, 2, 3, a)
testlist
library(rstan)
done <- "done"
getwd()
write.table(done, 'done.txt')
.rs.restartR()
waitOn <- list('anyThreat', c('venterHFIStd'), TRUE, 4, FALSE, FALSE, FALSE)
cueUp <- list('anyThreat', c('ncldPastureStd'), TRUE, 4, F, F, F)
waitOn[1]
unlist(waitOn[1])
?println
print.ln?
?
0
sdf
?println
?print
print('threat', threat)
threat <- 'word'
print('threat', threat)
print(c('threat', threat))
print(threat)
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
}
toRun <- list('anyThreat', c('ncldPastureStd'), TRUE, 4, F, F, F)
waitOn <- list('anyThreat', c('venterHFIStd'), TRUE, 4, FALSE, FALSE, FALSE)
waitOn <- list('anyThreat', c('venterHFIStd'), TRUE, 4, FALSE, FALSE, FALSE)
toRun <- list('anyThreat', c('ncldPastureStd'), TRUE, 4, F, F, F)
rm(list=ls())
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
}
waitOn <- list('anyThreat', c('venterHFIStd'), TRUE, 4, FALSE, FALSE, FALSE)
toRun <- list('anyThreat', c('ncldPastureStd'), TRUE, 4, F, F, F)
runFun(threat = toRun$threat, predictors = toRun$predictors, states = toRun$states, ncores = toRun$ncores, CAR = toRun$CAR, scramble = toRun$scramble, justEndemics = toRun$justEndemics)
toRun <- list(threat = 'anyThreat', predictors = c('ncldPastureStd'), states = T, ncores = 4, CAR = F, scramble = F, justEndemics = F)
runFun(threat = toRun$threat, predictors = toRun$predictors, states = toRun$states, ncores = toRun$ncores, CAR = toRun$CAR, scramble = toRun$scramble, justEndemics = toRun$justEndemics)
waitOn <- list('anyThreat', c('venterHFIStd'), TRUE, 4, FALSE, FALSE, FALSE)
waitOn <- list(threat = 'anyThreat', predictors = c('venterHFIStd'), states = TRUE,ncores =  4, CAR = FALSE,scramble = FALSE, justEndemics = FALSE)
toRun <- list(threat = 'anyThreat', predictors = c('ncldPastureStd'), states = T, ncores = 4, CAR = F, scramble = F, justEndemics = F)
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
}
cueUp <- function(waitOn, toRun) {
threat <- waitOn$threat
predictors <- waitOn$predictors
states <- waitOn$states
ncores <- waitOn$ncores
CAR <- waitOn$CAR
scramble <- waitOn$scramble
justEndemics <- waitOn$justEndemics
predictorString <- predictors[1]
if (length(predictors) > 1) {
for (i in 2:length(predictors)) {
predictorString <- paste(predictorString, predictors[i], sep = "_")
}
}
filename <- paste0('H:/Global Change Program/Research/Multi-Threat Assessment/Analysis - Threat Mapping/CAR beginning 07132017/CountyEndangeredSpecies-master/CAR Analyses/', threat, "_", predictorString, "_st", states, '_scr', scramble, '_CAR', CAR, '_end', justEndemics,  "/done.txt")
if (file.exists(filename)) {
runFun(threat = toRun$threat, predictors = toRun$predictors, states = toRun$states, ncores = toRun$ncores, CAR = toRun$CAR, scramble = toRun$scramble, justEndemics = toRun$justEndemics)
return('done')
}
Sys.sleep(600)
cueUp(waitOn, toRun)
}
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
done <- 'done'
write.table(done, 'done.txt')
}
runFun(threat = toRun$threat, predictors = toRun$predictors, states = toRun$states, ncores = toRun$ncores, CAR = toRun$CAR, scramble = toRun$scramble, justEndemics = toRun$justEndemics)
filename <- 'done.txt'
file.exists(filename)
rm(list=l90)
rm(list=ls())
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
done <- 'done'
write.table(done, 'done.txt')
}
runFun <- function(threat, predictors, states, ncores, CAR, scramble, justEndemics) {
print(threat)
print(predictors)
print(states)
print(ncores)
print(CAR)
print(scramble)
print(justEndemics)
done <- 'done'
write.table(done, 'done1.txt')
}
cueUp <- function(waitOn, toRun) {
threat <- waitOn$threat
predictors <- waitOn$predictors
states <- waitOn$states
ncores <- waitOn$ncores
CAR <- waitOn$CAR
scramble <- waitOn$scramble
justEndemics <- waitOn$justEndemics
predictorString <- predictors[1]
if (length(predictors) > 1) {
for (i in 2:length(predictors)) {
predictorString <- paste(predictorString, predictors[i], sep = "_")
}
}
# filename <- paste0('H:/Global Change Program/Research/Multi-Threat Assessment/Analysis - Threat Mapping/CAR beginning 07132017/CountyEndangeredSpecies-master/CAR Analyses/', threat, "_", predictorString, "_st", states, '_scr', scramble, '_CAR', CAR, '_end', justEndemics,  "/done.txt")
filename <- 'done.txt'
if (file.exists(filename)) {
runFun(threat = toRun$threat, predictors = toRun$predictors, states = toRun$states, ncores = toRun$ncores, CAR = toRun$CAR, scramble = toRun$scramble, justEndemics = toRun$justEndemics)
return('done')
}
Sys.sleep(60)
cueUp(waitOn, toRun)
}
waitOn <- list(threat = 'anyThreat', predictors = c('venterHFIStd'), states = TRUE,ncores =  4, CAR = FALSE,scramble = FALSE, justEndemics = FALSE)
toRun <- list(threat = 'anyThreat', predictors = c('ncldPastureStd'), states = T, ncores = 4, CAR = F, scramble = F, justEndemics = F)
cueUp(waitOn, toRun)
setwd("~/GitHub/Threat-mapping")
plan <- read.csv('analysis-planning.csv')
View(plan)
plan <- read.csv('analysis-planning.csv')
View(plan)
plan <- read.csv('analysis-planning.csv')
View(plan)
plan[1]
plan[1,1]
plan <- read.csv('analysis-planning.csv')
View(plan)
plan[1,1]
plan <- read.csv('analysis-planning.csv')
plan$threat <- NA
plan$predictor <- NA
plan$states <- NA
plan$CAR <- NA
plan$justEndemics <- NA
plan$islands <- NA
plan$status <- NA
View(plan)
?strsplit
line <- as.character(plan$line[1])
line <- as.character(plan$Line[1])
lineList <- strsplit(line, split = "=")
lineList <- unlist(lineList)
lineList
line <- as.character(plan$Line[1])
lineList <- strsplit(line, split = ",")
lineList <- unlist(lineList)
lineList
threat <- lineList[1]
threat <- strsplit(threat, split = "=")
threat <- lineList[1]
threat <- unlist(strsplit(threat, split = "="))
threat <- lineList[1]
threat <- unlist(strsplit(threat, split = "="))[2]
lineList
predictors <- unlist(strsplit(predictors, split = "="))[2]
predictors <- lineList[2]
predictors <- unlist(strsplit(predictors, split = "="))[2]
lineList
states <- unlist(strsplit(lineList[3], split = "="))[2]
lineList <- unlist(strsplit(line, split = ","))
threat <- unlist(strsplit(lineList[1], split = "= "))[2]
threat <- unlist(strsplit(lineList[1], split = "="))[2]
CAR <- unlist(strsplit(lineList[5], split = "="))[2]
plan$scramble <- NA
lineList
lineList <- unlist(strsplit(line, split = ","))
threat <- unlist(strsplit(lineList[1], split = "="))[2]
predictors <- unlist(strsplit(lineList[2], split = "="))[2]
states <- unlist(strsplit(lineList[3], split = "="))[2]
CAR <- unlist(strsplit(lineList[5], split = "="))[2]
scramble <- unlist(strsplit(lineList[6], split = "="))[2]
justEndemics <- unlist(strsplit(lineList[7], split = "="))[2]
islands <- unlist(strsplit(lineList[5], split = "="))[2]
islands <- unlist(strsplit(islands, split = ")"))[1
]
for (i in 1:nrow(plan)) {
line <- as.character(plan$Line[i])
lineList <- unlist(strsplit(line, split = ","))
plan$threat[i] <- unlist(strsplit(lineList[1], split = "="))[2]
plan$predictor[i] <- unlist(strsplit(lineList[2], split = "="))[2]
plan$states[i] <- unlist(strsplit(lineList[3], split = "="))[2]
plan$CAR[i] <- unlist(strsplit(lineList[5], split = "="))[2]
plan$scramble[i] <- unlist(strsplit(lineList[6], split = "="))[2]
plan$justEndemics[i] <- unlist(strsplit(lineList[7], split = "="))[2]
plan$islands[i] <- unlist(strsplit(lineList[5], split = "="))[2]
plan$islands[i] <- unlist(strsplit(islands, split = ")"))[1]
}
View(plan)
plan <- read.csv('analysis-planning.csv')
plan$threat <- NA
plan$predictor <- NA
plan$states <- NA
plan$CAR <- NA
plan$scramble <- NA
plan$justEndemics <- NA
plan$islands <- NA
plan$status <- NA
for (i in 1:nrow(plan)) {
line <- as.character(plan$Line[i])
lineList <- unlist(strsplit(line, split = ","))
plan$threat[i] <- unlist(strsplit(lineList[1], split = "="))[2]
plan$predictor[i] <- unlist(strsplit(lineList[2], split = "="))[2]
plan$states[i] <- unlist(strsplit(lineList[3], split = "="))[2]
plan$CAR[i] <- unlist(strsplit(lineList[5], split = "="))[2]
plan$scramble[i] <- unlist(strsplit(lineList[6], split = "="))[2]
plan$justEndemics[i] <- unlist(strsplit(lineList[7], split = "="))[2]
plan$islands[i] <- unlist(strsplit(lineList[5], split = "="))[2]
plan$islands[i] <- unlist(strsplit(islands, split = ")"))[1]
}
View(plan)
write.csv('sofar.csv', plan)
write.csv(plan, 'sofar.csv')
